"use client"

import { useState } from "react"
import Link from "next/link"
import Image from "next/image"
import { useRouter } from "next/navigation"
import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { Loader2 } from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"

import { registerSchema } from "@/lib/validations/auth"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { useAuth } from "@/lib/auth-context"
import { useRedirectIfAuthenticated } from "@/hooks/use-redirect-if-authenticated"
import type { RegisterFormValues } from "@/types/auth"

export default function RegisterPage() {
  const router = useRouter()
  const { register: registerUser } = useAuth()
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [registerType, setRegisterType] = useState<'business_owner' | 'customer'>('customer')
  const [animating, setAnimating] = useState(false)

  useRedirectIfAuthenticated()

  const form = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema) as any,
    defaultValues: {
      name: "",
      email: "",
      phone: "",
      password: "",
      password_confirmation: "",
      role: undefined,
      business_name: "",
      industry: "",
      logo: undefined,
    },
  })

  const switchRegistrationType = () => {
    setAnimating(true)
    setTimeout(() => {
      setRegisterType('business_owner')
      form.reset({
        ...form.getValues(),
        role: 'business_owner',
      })
    }, 300)
    
    // Reset animation state after animation completes
    setTimeout(() => {
      setAnimating(false)
    }, 800)
  }

  async function onSubmit(data: RegisterFormValues) {
    setIsLoading(true)
    setError(null)

    try {
      let payload: any = {
        name: data.name,
        email: data.email,
        phone: data.phone,
        password: data.password,
        password_confirmation: data.password_confirmation,
      }
      if (registerType === 'business_owner') {
        payload.role = 'business_owner'
        payload.business_name = data.business_name
        payload.industry = data.industry
        if (data.logo) payload.logo = data.logo
      }
      await registerUser(payload)
      // Success: user is redirected by context
    } catch (err: any) {
      let errorMessage = "Registration failed. Please try again."
      
      if (err.message) {
        // Error messages in English
        if (err.message.toLowerCase().includes("email")) {
          errorMessage = "This email address is already in use."
        } else if (err.message.toLowerCase().includes("password")) {
          errorMessage = "The provided password is not valid."
        } else if (err.message.toLowerCase().includes("network")) {
          errorMessage = "Connection error. Please check your internet connection."
        } else if (err.message.toLowerCase().includes("server")) {
          errorMessage = "Server error. Please try again later."
        }
      }
      
      setError(errorMessage)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br py-8 px-4">
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="flex w-full max-w-4xl bg-white rounded-2xl shadow-2xl overflow-hidden relative min-h-[650px] border border-[#10bc69]/10"
      >
        {/* Form Section */}
        <div className="flex-1 p-10 z-10">
          <motion.h2 
            key={registerType}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            className="text-3xl font-bold mb-8 text-gray-800 relative after:content-[''] after:block after:w-12 after:h-1 after:bg-gradient-to-r after:from-[#10bc69] after:to-[#10bc69] after:mt-2 after:rounded-full"
          >
            {registerType === 'customer' ? 'Client Registration' : 'Business Registration'}
          </motion.h2>

          {error && (
            <Alert variant="destructive" className="mb-4">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Full name</FormLabel>
                    <FormControl>
                      <div className="relative">
                        <Input 
                          placeholder="John Doe" 
                          {...field} 
                          className="w-full py-6 pl-12 pr-4 rounded-full bg-gray-100 focus:bg-white focus:outline-none focus:ring-2 focus:ring-[#10bc69] text-base text-gray-900 placeholder-gray-500 transition shadow-sm"
                        />
                        <span className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400">
                          <svg width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                            <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" />
                            <circle cx="12" cy="7" r="4" />
                          </svg>
                        </span>
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <div className="relative">
                        <Input 
                          placeholder="name@example.com" 
                          {...field} 
                          className="w-full py-6 pl-12 pr-4 rounded-full bg-gray-100 focus:bg-white focus:outline-none focus:ring-2 focus:ring-[#10bc69] text-base text-gray-900 placeholder-gray-500 transition shadow-sm"
                        />
                        <span className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400">
                          <svg width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                            <path d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                          </svg>
                        </span>
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Phone</FormLabel>
                    <FormControl>
                      <div className="relative">
                        <Input 
                          placeholder="+1 (555) 123-4567" 
                          {...field} 
                          className="w-full py-6 pl-12 pr-4 rounded-full bg-gray-100 focus:bg-white focus:outline-none focus:ring-2 focus:ring-[#10bc69] text-base text-gray-900 placeholder-gray-500 transition shadow-sm"
                        />
                        <span className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400">
                          <svg width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                            <path d="M20 14.66V17.66C20 18.77 19.1 19.66 18 19.66C13.04 19.66 8.34 17.66 4.93 14.25C1.52 10.84 -0.48 6.14 -0.48 1.18C-0.48 0.08 0.41 -0.82 1.52 -0.82H4.52C5.63 -0.82 6.52 0.08 6.52 1.18C6.52 2.29 6.91 3.36 7.69 4.14C8.47 4.92 9.54 5.31 10.65 5.31H13.65C14.76 5.31 15.65 6.21 15.65 7.31C15.65 8.42 15.26 9.49 14.48 10.27C13.7 11.05 12.63 11.44 11.52 11.44" />
                          </svg>
                        </span>
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {registerType === 'business_owner' && (
                <>
                  <FormField
                    control={form.control}
                    name="business_name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Business name</FormLabel>
                        <FormControl>
                          <div className="relative">
                            <Input 
                              placeholder="Your business" 
                              {...field} 
                              className="w-full py-6 pl-12 pr-4 rounded-full bg-gray-100 focus:bg-white focus:outline-none focus:ring-2 focus:ring-[#10bc69] text-base text-gray-900 placeholder-gray-500 transition shadow-sm"
                            />
                            <span className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400">
                              <svg width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                                <path d="M3 21h18M3 7v1a1 1 0 001 1h16a1 1 0 001-1V7m-9-4h3m-6 0h3m-6 4V3h12v4H3z" />
                              </svg>
                            </span>
                          </div>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="industry"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Industry</FormLabel>
                        <FormControl>
                          <div className="relative">
                            <Input 
                              placeholder="eg: Restaurant, Healthcare, Retail" 
                              {...field} 
                              className="w-full py-6 pl-12 pr-4 rounded-full bg-gray-100 focus:bg-white focus:outline-none focus:ring-2 focus:ring-[#10bc69] text-base text-gray-900 placeholder-gray-500 transition shadow-sm"
                            />
                            <span className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400">
                              <svg width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                                <path d="M21 13V6a2 2 0 00-2-2H5a2 2 0 00-2 2v7m18 0v3a2 2 0 01-2 2H5a2 2 0 01-2-2v-3m18 0H3" />
                              </svg>
                            </span>
                          </div>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="logo"
                    render={({ field: { value, onChange, ...field } }) => (
                      <FormItem>
                        <FormLabel>Logo (optional)</FormLabel>
                        <FormControl>
                          <div className="relative">
                            <Input
                              type="file"
                              accept="image/*"
                              onChange={(e) => {
                                const file = e.target.files?.[0]
                                if (file) {
                                  onChange(file)
                                }
                              }}
                              className="w-full py-6 pl-12 pr-4 rounded-full bg-gray-100 focus:bg-white focus:outline-none focus:ring-2 focus:ring-[#10bc69] text-base text-gray-900 placeholder-gray-500 transition shadow-sm file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:font-semibold file:bg-[#10bc69]/10 file:text-[#10bc69] hover:file:bg-[#10bc69]/20"
                              {...field}
                              value={undefined}
                            />
                            <span className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400">
                              <svg width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                                <path d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                              </svg>
                            </span>
                            {value && (
                              <div className="absolute right-4 top-1/2 -translate-y-1/2">
                                <div className="w-6 h-6 text-[#10bc69]">
                                  <svg fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                                    <path d="M5 13l4 4L19 7" />
                                  </svg>
                                </div>
                              </div>
                            )}
                          </div>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </>
              )}

              <FormField
                control={form.control}
                name="password"
                render={({ field }) => {
                  const [showPassword, setShowPassword] = useState(false)
                  return (
                    <FormItem>
                      <FormLabel>Password</FormLabel>
                      <FormControl>
                        <div className="relative">
                          <Input 
                            type={showPassword ? "text" : "password"}
                            placeholder="••••••••"
                            {...field} 
                            className="w-full py-6 pl-12 pr-12 rounded-full bg-gray-100 focus:bg-white focus:outline-none focus:ring-2 focus:ring-[#10bc69] text-base text-gray-900 placeholder-gray-500 transition shadow-sm"
                          />
                          <span className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400">
                            <svg width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                              <path d="M12 15a3 3 0 100-6 3 3 0 000 6z" />
                              <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7z" />
                            </svg>
                          </span>
                          <button
                            type="button"
                            onClick={() => setShowPassword(!showPassword)}
                            className="absolute right-4 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600"
                          >
                            {showPassword ? (
                              <svg width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                                <path d="M13.875 18.825A10.05 10.05 0 0112 19c-7 0-10-7-10-7s1.125-2.625 3.375-4.5M8.25 15.75A4.5 4.5 0 0114.25 9.75M3 3l18 18M9.75 9.75A4.5 4.5 0 0115 15" />
                              </svg>
                            ) : (
                              <svg width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                                <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7z" />
                                <path d="M12 15a3 3 0 100-6 3 3 0 000 6z" />
                              </svg>
                            )}
                          </button>
                        </div>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )
                }}
              />

              <FormField
                control={form.control}
                name="password_confirmation"
                render={({ field }) => {
                  const [showPassword, setShowPassword] = useState(false)
                  return (
                    <FormItem>
                      <FormLabel>Confirm password</FormLabel>
                      <FormControl>
                        <div className="relative">
                          <Input 
                            type={showPassword ? "text" : "password"}
                            placeholder="••••••••"
                            {...field} 
                            className="w-full py-6 pl-12 pr-12 rounded-full bg-gray-100 focus:bg-white focus:outline-none focus:ring-2 focus:ring-[#10bc69] text-base text-gray-900 placeholder-gray-500 transition shadow-sm"
                          />
                          <span className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400">
                            <svg width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                              <path d="M12 15a3 3 0 100-6 3 3 0 000 6z" />
                              <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7z" />
                            </svg>
                          </span>
                          <button
                            type="button"
                            onClick={() => setShowPassword(!showPassword)}
                            className="absolute right-4 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600"
                          >
                            {showPassword ? (
                              <svg width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                                <path d="M13.875 18.825A10.05 10.05 0 0112 19c-7 0-10-7-10-7s1.125-2.625 3.375-4.5M8.25 15.75A4.5 4.5 0 0114.25 9.75M3 3l18 18M9.75 9.75A4.5 4.5 0 0115 15" />
                              </svg>
                            ) : (
                              <svg width="20" height="20" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                                <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7z" />
                                <path d="M12 15a3 3 0 100-6 3 3 0 000 6z" />
                              </svg>
                            )}
                          </button>
                        </div>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )
                }}
              />

              <button
                type="submit"
                className="w-full py-6 mt-4 rounded-full bg-[#10bc69] text-white font-semibold hover:bg-[#0e9e5c] transition shadow-md disabled:opacity-60"
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin inline-block" />
                    Creating account...
                  </>
                ) : (
                  "Create account"
                )}
              </button>

              <div className="text-center text-sm">
                Already registered?{" "}
                <Link href="/auth/login" className="text-[#10bc69] hover:underline">
                  Log in
                </Link>
              </div>
            </form>
          </Form>
        </div>

        {/* Curve Divider */}
        <AnimatePresence>
          <motion.div 
            key={registerType}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.5 }}
            className="absolute top-0 bottom-0 left-[45%] w-[10%] z-0 hidden md:block"
          >
            <motion.div 
              className={`absolute inset-0 bg-gradient-to-br from-[#10bc69] to-[#10bc69] ${registerType === 'business_owner' ? 'rounded-r-full -scale-x-125' : 'rounded-l-full scale-x-125'}`}
              animate={{
                scale: animating ? [1, 1.1, 1] : 1
              }}
              transition={{ duration: 0.5 }}
            ></motion.div>
          </motion.div>
        </AnimatePresence>

        {/* Info Section */}
        <motion.div 
          key={registerType + "content"}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          className="hidden md:flex flex-1 bg-gradient-to-br from-[#10bc69] to-[#10bc69] text-white p-10 flex-col justify-between relative z-10"
        >
          <div className="text-center mt-10">
            <motion.h3 
              className="text-3xl font-bold mb-4"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.3 }}
            >
              Join the waiting queues!
            </motion.h3>
            <motion.p 
              className="mb-8 text-lg"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.4 }}
            >
              Register to easily manage your waiting queues and wait time!
            </motion.p>
            {registerType === 'customer' && (
              <motion.button
                type="button"
                onClick={switchRegistrationType}
                className="inline-block px-8 py-3 border-2 border-white rounded-full font-bold text-white hover:bg-white hover:text-[#10bc69] transition-all duration-200"
                whileHover={{ scale: 1.05, backgroundColor: "rgba(255, 255, 255, 1)", color: "#10bc69" }}
                whileTap={{ scale: 0.98 }}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.5 }}
              >
                Register as owner
              </motion.button>
            )}
          </div>
          <motion.div 
            className="flex justify-center items-center mt-10"
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.6 }}
          >
            <Image
              src="/images/customer-registration.svg"
              alt="Registration illustration"
              width={300}
              height={300}
              priority
              className="drop-shadow-lg transform-gpu transition-transform duration-500 hover:scale-105"
            />
          </motion.div>
        </motion.div>
      </motion.div>
    </div>
  )
}
